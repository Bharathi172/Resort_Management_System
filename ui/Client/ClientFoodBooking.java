package ui.Client;

import resort.EcoSystem;
import resort.Food.FoodItem;
import resort.User.User;
import resort.RolesCD.FoodRequest;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.MutableComboBoxModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author arvin
 */
public class ClientFoodBooking extends javax.swing.JPanel {

    /**
     * Creates new form ClientFoodBooking
     */
    EcoSystem system;
    User user;
    ArrayList<FoodItem> foodOrderList;

    public ClientFoodBooking(EcoSystem system, User user) {
        initComponents();

        foodOrderList = new ArrayList<FoodItem>();
        this.system = system;
        this.user = user;

        MutableComboBoxModel<String> model = new DefaultComboBoxModel<String>();

        for (FoodItem itemList : system.getFBItemDirectory().getFoodItemDirectoryList()) {
            model.addElement(itemList.getFoodItemName());
        }

        chooseFoodDropdown.setModel(model);

        itemNameTxt.setEditable(false);
        itemCategoryTxt.setEditable(false);
        itemPriceTxt.setEditable(false);

        populateRequestTable();
        formatRows();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        chooseFoodDropdown = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        itemNameTxt = new javax.swing.JTextField();
        viewDetailsBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        itemCategoryTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        itemPriceTxt = new javax.swing.JTextField();
        addItemBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemListTable = new javax.swing.JTable();
        bookOrderBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderStatusTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        removeItemBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Choose a Food or Beverage:");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Dish Name:");

        viewDetailsBtn.setBackground(new java.awt.Color(0, 102, 102));
        viewDetailsBtn.setForeground(new java.awt.Color(255, 255, 255));
        viewDetailsBtn.setText("View Details");
        viewDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Dish Category:");

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 102));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Dish Price:");

        addItemBtn.setBackground(new java.awt.Color(0, 102, 102));
        addItemBtn.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        addItemBtn.setForeground(new java.awt.Color(255, 255, 255));
        addItemBtn.setText("Add Dish");
        addItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemBtnActionPerformed(evt);
            }
        });

        itemListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dish Name", "Dish Category", "Dish Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(itemListTable);

        bookOrderBtn.setBackground(new java.awt.Color(0, 102, 102));
        bookOrderBtn.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        bookOrderBtn.setForeground(new java.awt.Color(255, 255, 255));
        bookOrderBtn.setText("Book Order");
        bookOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookOrderBtnActionPerformed(evt);
            }
        });

        orderStatusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "List of Items", "Total Price", "Order Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderStatusTable);

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 102));
        jLabel6.setText("Food Item Order Status");

        removeItemBtn.setBackground(new java.awt.Color(0, 102, 102));
        removeItemBtn.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        removeItemBtn.setForeground(new java.awt.Color(255, 255, 255));
        removeItemBtn.setText("Remove Item");
        removeItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemBtnActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Book Food Items");
        jPanel1.add(jLabel1);

        jLabel7.setBackground(new java.awt.Color(51, 51, 51));
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Images_R/f1.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(500, 500, 500)
                .addComponent(chooseFoodDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 1321, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(itemNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(itemCategoryTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(itemPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(addItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(480, 480, 480)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(424, 424, 424)
                .addComponent(removeItemBtn)
                .addGap(10, 10, 10)
                .addComponent(bookOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(440, 440, 440)
                .addComponent(viewDetailsBtn))
            .addGroup(layout.createSequentialGroup()
                .addGap(390, 390, 390)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(chooseFoodDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(158, 158, 158)
                                .addComponent(viewDetailsBtn)))))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(itemNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(itemCategoryTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(itemPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(addItemBtn))
                .addGap(20, 20, 20)
                .addComponent(jLabel6)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(99, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void viewDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsBtnActionPerformed
        // TODO add your handling code here:

        try {
            if (chooseFoodDropdown.getSelectedItem() != null) {

                String itemName = String.valueOf(chooseFoodDropdown.getSelectedItem());
                FoodItem itemDetails = system.getFBItemDirectory().getFoodItemByName(itemName);

                itemNameTxt.setText(itemDetails.getFoodItemName());
                itemCategoryTxt.setText(itemDetails.getFoodCategory());
                itemPriceTxt.setText(String.valueOf(itemDetails.getFoodItemPrice()));

            } else {
                JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for viewing");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for viewing");
        }
    }//GEN-LAST:event_viewDetailsBtnActionPerformed

    private void addItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemBtnActionPerformed
        // TODO add your handling code here:

        try {

            DefaultTableModel itemListModel = (DefaultTableModel) itemListTable.getModel();

            if (chooseFoodDropdown.getSelectedItem() != null) {

                String itemName = String.valueOf(chooseFoodDropdown.getSelectedItem());
                FoodItem itemDetails = system.getFBItemDirectory().getFoodItemByName(itemName);

                Object[] newRow = new Object[3];
                newRow[0] = itemDetails.getFoodItemName();
                newRow[1] = itemDetails.getFoodCategory();
                newRow[2] = itemDetails.getFoodItemPrice();

                itemListModel.addRow(newRow);
                foodOrderList.add(itemDetails);
                
                clearFields();

            } else {
                JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for adding to list");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for adding to list");
        }
    }//GEN-LAST:event_addItemBtnActionPerformed

    private void removeItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemBtnActionPerformed
        // TODO add your handling code here:

        try {
            int index = itemListTable.getSelectedRow();

            if (index < 0) {
                JOptionPane.showMessageDialog(this, "Please select a Food or Beverage item to be removed from list");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
            String itemName = String.valueOf(model.getValueAt(index, 0));
            FoodItem itemDetails = system.getFBItemDirectory().getFoodItemByName(itemName);

            model.removeRow(index);
            foodOrderList.remove(itemDetails);

            JOptionPane.showMessageDialog(this, "Food or Beverage item removed successfully from list");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a Food or Beverage item to be removed from list");
        }
    }//GEN-LAST:event_removeItemBtnActionPerformed

    private void bookOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookOrderBtnActionPerformed
        // TODO add your handling code here:

        FoodRequest bookFoodBev = new FoodRequest();

        try {
            DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
            if (model.getRowCount() != 0) {

                bookFoodBev.setFoodItemDetails(foodOrderList);
                bookFoodBev.setUserId(user.getUserId());
                bookFoodBev.setOrderStatus("Pending");

                system.getFoodRequestDirectory().getFoodRequestsList().add(bookFoodBev);

                JOptionPane.showMessageDialog(this, "Food and Beverage order request sent to Manager");

                foodOrderList = new ArrayList<FoodItem>();
                populateRequestTable();

                model.setRowCount(0);
                clearFields();
                formatRows();
                
            } else {
                JOptionPane.showMessageDialog(this, "Choose valid Food and Beverage items for booking");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose valid Food and Beverage items for booking");
        }
    }//GEN-LAST:event_bookOrderBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemBtn;
    private javax.swing.JButton bookOrderBtn;
    private javax.swing.JComboBox<String> chooseFoodDropdown;
    private javax.swing.JTextField itemCategoryTxt;
    private javax.swing.JTable itemListTable;
    private javax.swing.JTextField itemNameTxt;
    private javax.swing.JTextField itemPriceTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderStatusTable;
    private javax.swing.JButton removeItemBtn;
    private javax.swing.JButton viewDetailsBtn;
    // End of variables declaration//GEN-END:variables

    private void populateRequestTable() {

        try {
            DefaultTableModel model = (DefaultTableModel) orderStatusTable.getModel();
            model.setRowCount(0);

            for (FoodRequest fbWorkRequest : system.getFoodRequestDirectory().getFoodRequestsList()) {

                String itemsList = "";
                float orderPrice = 0;
                if (fbWorkRequest.getUserId().equals(user.getUserId())) {

                    for (FoodItem item : fbWorkRequest.getFoodItemDetails()) {
                        itemsList += item.getFoodItemName() + ", ";
                        orderPrice += item.getFoodItemPrice();
                    }

                    Object[] newRow = new Object[3];
                    newRow[0] = itemsList;
                    newRow[1] = orderPrice;
                    newRow[2] = fbWorkRequest.getOrderStatus();

                    model.addRow(newRow);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void clearFields() {
        
        itemNameTxt.setText("");
        itemPriceTxt.setText("");
        itemCategoryTxt.setText("");
        
    }
    
    private void formatRows() {

        DefaultTableModel model = (DefaultTableModel) orderStatusTable.getModel();

        orderStatusTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                String status = String.valueOf(model.getValueAt(row, 2));
                c.setBackground(status.equals("Pending") ? Color.WHITE : status.equals("Approved") ? Color.GREEN : Color.RED);
                return c;
            }
        });

    }
}
