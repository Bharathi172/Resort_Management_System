package ui.Client;

import resort.EcoSystem;
import resort.Game.Game;
import resort.User.User;
import resort.RolesCD.GameRequest;
import java.awt.Color;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.MutableComboBoxModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;


public class ClientGameBooking extends javax.swing.JPanel {

    /**
     * Creates new form ClientGameBooking
     */
    
    EcoSystem system;
    User user;

    public ClientGameBooking(EcoSystem system, User user) {
        initComponents();
        
        this.system = system;
        this.user = user;
        
        MutableComboBoxModel<String> model = new DefaultComboBoxModel<String>();

        for (Game gameList : system.getGameDirectory().getGameDirectoryList()) {
            model.addElement(gameList.getGameTitle());
        }

        chooseGameDropdown.setModel(model);

        gameNameTxt.setEditable(false);
        gameCategoryTxt.setEditable(false);
        priceTxt.setEditable(false);

        populateRequestTable();
        formatRows();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewGameBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        priceTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        numberOfHoursTxt = new javax.swing.JTextField();
        gameBookingDateTxt = new com.toedter.calendar.JDateChooser();
        bookGameBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        gameWorkQueueTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        chooseGameDropdown = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        gameNameTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        gameCategoryTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));

        viewGameBtn.setBackground(new java.awt.Color(0, 102, 102));
        viewGameBtn.setForeground(new java.awt.Color(255, 255, 255));
        viewGameBtn.setText("View Details");
        viewGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewGameBtnActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(0, 102, 102));
        jLabel6.setText("Rate per hour:");

        priceTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTxtActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(0, 102, 102));
        jLabel7.setText("Select Game Session Date:");

        jLabel8.setForeground(new java.awt.Color(0, 102, 102));
        jLabel8.setText(" Gaming Period:");

        gameBookingDateTxt.setDateFormatString("MM/dd/yyyy");

        bookGameBtn.setBackground(new java.awt.Color(0, 102, 102));
        bookGameBtn.setForeground(new java.awt.Color(255, 255, 255));
        bookGameBtn.setText("Book Game");
        bookGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookGameBtnActionPerformed(evt);
            }
        });

        gameWorkQueueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Game Title", "Game Theme", "Booking Date", "Rate per hour", "Gaming Period", "Total Rate", "Request Status Quo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(gameWorkQueueTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Book A Game");

        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("Choose a game:");

        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setText("Game Title:");

        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setText("Game Theme:");

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 102));
        jLabel9.setText("Game Booking Status");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Images_R/gamegolf.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(chooseGameDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(viewGameBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(440, 440, 440)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(numberOfHoursTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(399, 399, 399)
                        .addComponent(bookGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 942, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, Short.MAX_VALUE)
                                        .addComponent(gameBookingDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(gameNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)))
                                .addGap(18, 18, 18)
                                .addComponent(gameCategoryTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(386, 386, 386)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 26, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {gameBookingDateTxt, gameCategoryTxt, gameNameTxt, numberOfHoursTxt, priceTxt});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(chooseGameDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewGameBtn))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gameNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(gameCategoryTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(numberOfHoursTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addComponent(bookGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(gameBookingDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {gameBookingDateTxt, gameCategoryTxt, gameNameTxt, numberOfHoursTxt, priceTxt});

    }// </editor-fold>//GEN-END:initComponents

    private void viewGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewGameBtnActionPerformed
        // View Vehicle Details on choosing

        try {
            if (chooseGameDropdown.getSelectedItem() != null) {

                String gameName = String.valueOf(chooseGameDropdown.getSelectedItem());
                Game gameDetails = system.getGameDirectory().getGameByName(gameName);

                gameNameTxt.setText(gameDetails.getGameTitle());
                gameCategoryTxt.setText(gameDetails.getGameGenre());
                priceTxt.setText(String.valueOf(gameDetails.getCost()));

            } else {
                JOptionPane.showMessageDialog(this, "Choose a valid Game for booking");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose a valid Game for booking");
        }
    }//GEN-LAST:event_viewGameBtnActionPerformed

    private void bookGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookGameBtnActionPerformed
        // Book a vehiclgameBookingDateTxtils
        GameRequest bookGame = new GameRequest();

        try {
            if (chooseGameDropdown.getSelectedItem() != null) {
                String gameName = String.valueOf(chooseGameDropdown.getSelectedItem());
                Game gameDetails = system.getGameDirectory().getGameByName(gameName);

                Date selectedDate = gameBookingDateTxt.getDate();
                SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                String strDate = dateFormat.format(selectedDate);
                Date bookingDate = dateFormat.parse(strDate);

                int numberOfHours = Integer.parseInt(numberOfHoursTxt.getText());

                bookGame.setSelectedGame(gameDetails);
                bookGame.setReservationDate(bookingDate);
                bookGame.setDurationInHours(numberOfHours);
                bookGame.setUserId(user.getUserId());
                bookGame.setBookingStatus("Pending");

                system.getGameRequestDirectory().getGameRequestList().add(bookGame);

                JOptionPane.showMessageDialog(this, "Game booking request sent to Incharge");
                populateRequestTable();
                clearFields();
                formatRows();
                
            } else {
                JOptionPane.showMessageDialog(this, "Enter valid date and number of hours for booking a Game");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter valid date and number of hours for booking a Game");
        }
    }//GEN-LAST:event_bookGameBtnActionPerformed

    private void priceTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceTxtActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookGameBtn;
    private javax.swing.JComboBox<String> chooseGameDropdown;
    private com.toedter.calendar.JDateChooser gameBookingDateTxt;
    private javax.swing.JTextField gameCategoryTxt;
    private javax.swing.JTextField gameNameTxt;
    private javax.swing.JTable gameWorkQueueTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField numberOfHoursTxt;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JButton viewGameBtn;
    // End of variables declaration//GEN-END:variables

    private void populateRequestTable() {
        
        try {
            DefaultTableModel model = (DefaultTableModel) gameWorkQueueTable.getModel();
            model.setRowCount(0);

            for (GameRequest gameWorkRequest : system.getGameRequestDirectory().getGameRequestList()) {

                if (gameWorkRequest.getUserId().equals(user.getUserId())) {
                    Object[] newRow = new Object[7];
                    newRow[0] = gameWorkRequest.getSelectedGame().getGameTitle();
                    newRow[1] = gameWorkRequest.getSelectedGame().getGameGenre();
                    newRow[2] = gameWorkRequest.getReservationDate();
                    newRow[3] = gameWorkRequest.getSelectedGame().getCost();
                    newRow[4] = gameWorkRequest.getDurationInHours();
                    newRow[5] = (gameWorkRequest.getDurationInHours()*gameWorkRequest.getSelectedGame().getCost());
                    newRow[6] = gameWorkRequest.getBookingStatus();

                    model.addRow(newRow);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void clearFields() {
        
        gameNameTxt.setText("");
        gameCategoryTxt.setText("");
        priceTxt.setText("");
        numberOfHoursTxt.setText("");
        gameBookingDateTxt.setCalendar(null);
    }
    
    private void formatRows() {

        DefaultTableModel model = (DefaultTableModel) gameWorkQueueTable.getModel();

        gameWorkQueueTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                String status = String.valueOf(model.getValueAt(row, 6));
                c.setBackground(status.equals("Pending") ? Color.WHITE : status.equals("Approved") ? Color.GREEN : Color.RED);
                return c;
            }
        });

    }
}
